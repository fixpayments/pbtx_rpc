// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file pbtx-rpc.proto (package pbtxrpc, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message pbtxrpc.RequestResponse
 */
export class RequestResponse extends Message<RequestResponse> {
  /**
   * sha256 hash of the serialized request message
   * that this response corresponds to.
   *
   * @generated from field: bytes request_hash = 1;
   */
  requestHash = new Uint8Array(0);

  /**
   * @generated from field: pbtxrpc.RequestResponse.StatusCode status = 2;
   */
  status = RequestResponse_StatusCode.SUCCESS;

  /**
   * serialized data message
   *
   * @generated from field: bytes data = 3;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<RequestResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "pbtxrpc.RequestResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "status", kind: "enum", T: proto3.getEnumType(RequestResponse_StatusCode) },
    { no: 3, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestResponse {
    return new RequestResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestResponse {
    return new RequestResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestResponse {
    return new RequestResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RequestResponse | PlainMessage<RequestResponse> | undefined, b: RequestResponse | PlainMessage<RequestResponse> | undefined): boolean {
    return proto3.util.equals(RequestResponse, a, b);
  }
}

/**
 * indicates if the request was successful
 *
 * @generated from enum pbtxrpc.RequestResponse.StatusCode
 */
export enum RequestResponse_StatusCode {
  /**
   * @generated from enum value: SUCCESS = 0;
   */
  SUCCESS = 0,

  /**
   * @generated from enum value: INVALID_SIGNATURE = 1;
   */
  INVALID_SIGNATURE = 1,

  /**
   * @generated from enum value: DUPLICATE_ACTOR = 2;
   */
  DUPLICATE_ACTOR = 2,

  /**
   * @generated from enum value: INVALID_CREDENTIALS = 3;
   */
  INVALID_CREDENTIALS = 3,

  /**
   * @generated from enum value: INVALID_ACTOR = 4;
   */
  INVALID_ACTOR = 4,

  /**
   * @generated from enum value: INVALID_NETWORK_ID = 5;
   */
  INVALID_NETWORK_ID = 5,

  /**
   * @generated from enum value: INVALID_AUTHORITY = 6;
   */
  INVALID_AUTHORITY = 6,

  /**
   * @generated from enum value: INVALID_SEQ = 7;
   */
  INVALID_SEQ = 7,

  /**
   * @generated from enum value: INVALID_CONTENT = 8;
   */
  INVALID_CONTENT = 8,

  /**
   * @generated from enum value: INFRASTRUCTURE_ERROR = 100;
   */
  INFRASTRUCTURE_ERROR = 100,
}
// Retrieve enum metadata with: proto3.getEnumType(RequestResponse_StatusCode)
proto3.util.setEnumType(RequestResponse_StatusCode, "pbtxrpc.RequestResponse.StatusCode", [
  { no: 0, name: "SUCCESS" },
  { no: 1, name: "INVALID_SIGNATURE" },
  { no: 2, name: "DUPLICATE_ACTOR" },
  { no: 3, name: "INVALID_CREDENTIALS" },
  { no: 4, name: "INVALID_ACTOR" },
  { no: 5, name: "INVALID_NETWORK_ID" },
  { no: 6, name: "INVALID_AUTHORITY" },
  { no: 7, name: "INVALID_SEQ" },
  { no: 8, name: "INVALID_CONTENT" },
  { no: 100, name: "INFRASTRUCTURE_ERROR" },
]);

/**
 * object in RequestResponse.data
 *
 * @generated from message pbtxrpc.AccountSeqData
 */
export class AccountSeqData extends Message<AccountSeqData> {
  /**
   * @generated from field: fixed64 network_id = 1;
   */
  networkId = protoInt64.zero;

  /**
   * @generated from field: fixed64 actor = 2;
   */
  actor = protoInt64.zero;

  /**
   * last transaction details, see pbtx.proto
   *
   * @generated from field: uint32 last_seqnum = 3;
   */
  lastSeqnum = 0;

  /**
   * @generated from field: fixed64 prev_hash = 4;
   */
  prevHash = protoInt64.zero;

  constructor(data?: PartialMessage<AccountSeqData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "pbtxrpc.AccountSeqData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "network_id", kind: "scalar", T: 6 /* ScalarType.FIXED64 */ },
    { no: 2, name: "actor", kind: "scalar", T: 6 /* ScalarType.FIXED64 */ },
    { no: 3, name: "last_seqnum", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "prev_hash", kind: "scalar", T: 6 /* ScalarType.FIXED64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountSeqData {
    return new AccountSeqData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountSeqData {
    return new AccountSeqData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountSeqData {
    return new AccountSeqData().fromJsonString(jsonString, options);
  }

  static equals(a: AccountSeqData | PlainMessage<AccountSeqData> | undefined, b: AccountSeqData | PlainMessage<AccountSeqData> | undefined): boolean {
    return proto3.util.equals(AccountSeqData, a, b);
  }
}

/**
 * @generated from message pbtxrpc.RegisterAccount
 */
export class RegisterAccount extends Message<RegisterAccount> {
  /**
   * pbtx.Permission message for a new or existing account, encoded
   * as bytes.
   *
   * @generated from field: bytes permission_bytes = 1;
   */
  permissionBytes = new Uint8Array(0);

  /**
   * PBTX-compatible signature of the above, signed by one of
   * permission keys.
   *
   * @generated from field: bytes signature = 2;
   */
  signature = new Uint8Array(0);

  /**
   * optional field, up to 512 bytes, containing a certificate that can
   * be verified by the registration service
   *
   * @generated from field: bytes credentials = 3;
   */
  credentials = new Uint8Array(0);

  constructor(data?: PartialMessage<RegisterAccount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "pbtxrpc.RegisterAccount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "permission_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "credentials", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterAccount {
    return new RegisterAccount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterAccount {
    return new RegisterAccount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterAccount {
    return new RegisterAccount().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterAccount | PlainMessage<RegisterAccount> | undefined, b: RegisterAccount | PlainMessage<RegisterAccount> | undefined): boolean {
    return proto3.util.equals(RegisterAccount, a, b);
  }
}

/**
 * @generated from message pbtxrpc.GetSeq
 */
export class GetSeq extends Message<GetSeq> {
  /**
   * actor account ID
   *
   * @generated from field: fixed64 actor = 1;
   */
  actor = protoInt64.zero;

  constructor(data?: PartialMessage<GetSeq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "pbtxrpc.GetSeq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "actor", kind: "scalar", T: 6 /* ScalarType.FIXED64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSeq {
    return new GetSeq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSeq {
    return new GetSeq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSeq {
    return new GetSeq().fromJsonString(jsonString, options);
  }

  static equals(a: GetSeq | PlainMessage<GetSeq> | undefined, b: GetSeq | PlainMessage<GetSeq> | undefined): boolean {
    return proto3.util.equals(GetSeq, a, b);
  }
}

